// EcoSmart Guide - Enhanced Popup Script
document.addEventListener('DOMContentLoaded', function() {
    // DOM Elements
    const scanButton = document.getElementById('scanPage');
    const ecoScoreElement = document.getElementById('ecoScore');
    const ecoMessageElement = document.getElementById('ecoMessage');
    const suggestionsList = document.getElementById('suggestionsList');
    const carbonFootprintEl = document.getElementById('carbonFootprint');
    const waterUsageEl = document.getElementById('waterUsage');
    const recyclabilityEl = document.getElementById('recyclability');
    const productTypeElement = document.getElementById('productType');
    const materialsList = document.getElementById('materialsList');

    // Initialize the popup
    function init() {
        showLoadingState(true);
        analyzePage();
        showDefaultSuggestions();
    }

    // Show loading state
    function showLoadingState(loading) {
        const loadingElement = document.getElementById('loading');
        if (loadingElement) {
            loadingElement.style.display = loading ? 'block' : 'none';
        }
    }

    // Display default sustainability tips
    function showDefaultSuggestions() {
        if (!suggestionsList) return;
        
        const tips = [
            'Click "Analyze Product" to check sustainability score',
            'Look for FSC or PEFC certified wood products',
            'Choose solid wood over MDF or particle board',
            'Check for recycled or reclaimed materials',
            'Consider the product\'s lifespan and durability'
        ];
        
        suggestionsList.innerHTML = '';
        tips.forEach(tip => {
            const li = document.createElement('li');
            li.textContent = tip;
            suggestionsList.appendChild(li);
        });
    }

    // Get sustainability tips based on product type and score
    function getProductSpecificTips(productType, score) {
        const tips = [];
        
        // General tips for all products
        if (score < 40) {
            tips.push('Consider products with higher sustainability scores');
            tips.push('Look for eco-certifications like FSC or PEFC');
        }
        
        // Product type specific tips
        if (productType && productType.toLowerCase().includes('wood')) {
            tips.push('Solid wood is more durable and sustainable than MDF or particle board');
            tips.push('Look for FSC or PEFC certified wood products');
            if (score < 60) {
                tips.push('Consider reclaimed or recycled wood options');
            }
        } else if (productType && productType.toLowerCase().includes('furniture')) {
            tips.push('Choose furniture made from sustainable materials');
            tips.push('Consider second-hand or upcycled furniture');
        }
        
        // Add some general tips if we don't have enough
        const generalTips = [
            'Check for products with minimal packaging',
            'Consider the product\'s expected lifespan',
            'Look for brands with transparent supply chains',
            'Check if the product is repairable or has replacement parts',
            'Consider the carbon footprint of shipping'
        ];
        
        while (tips.length < 5) {
            const randomTip = generalTips[Math.floor(Math.random() * generalTips.length)];
            if (!tips.includes(randomTip)) {
                tips.push(randomTip);
            }
        }
        
        return tips.slice(0, 5); // Return max 5 tips
    }
    
    // Update the sustainability display
    function updateSustainabilityDisplay(data = {}) {
        const score = data.score || 0;
        const productType = data.productInfo?.type || 'product';
        const materials = data.materials || [];
        
        // Update score
        if (ecoScoreElement) {
            ecoScoreElement.textContent = Math.round(score);
            ecoScoreElement.className = 'score-value ' + 
                (score >= 70 ? 'excellent' : score >= 40 ? 'good' : 'poor');
        }
        
        // Update message
        if (ecoMessageElement) {
            if (score >= 70) {
                ecoMessageElement.textContent = 'Excellent eco-choice!';
            } else if (score >= 40) {
                ecoMessageElement.textContent = 'Moderate environmental impact';
            } else {
                ecoMessageElement.textContent = 'Consider more sustainable options';
            }
        }
        
        // Update product type
        if (productTypeElement) {
            productTypeElement.textContent = productType.charAt(0).toUpperCase() + productType.slice(1);
        }
        
        // Update materials list
        if (materialsList) {
            materialsList.innerHTML = '';
            if (materials.length > 0) {
                materials.forEach(material => {
                    const li = document.createElement('li');
                    li.textContent = material;
                    materialsList.appendChild(li);
                });
            } else {
                const li = document.createElement('li');
                li.textContent = 'No materials detected';
                li.className = 'no-materials';
                materialsList.appendChild(li);
            }
        }
        
        // Update metrics if available
        if (data.carbonFootprint && carbonFootprintEl) {
            carbonFootprintEl.textContent = data.carbonFootprint.toString().includes('kg') ? 
                data.carbonFootprint : `${data.carbonFootprint} kg CO2e`;
        }
        if (data.waterUsage && waterUsageEl) {
            waterUsageEl.textContent = data.waterUsage.toString().includes('L') ? 
                data.waterUsage : `${data.waterUsage} L`;
        }
        if (data.recyclability && recyclabilityEl) {
            recyclabilityEl.textContent = data.recyclability.toString().includes('%') ? 
                data.recyclability : `${data.recyclability}%`;
        }
        
        // Update suggestions based on product type and score
        if (suggestionsList) {
            suggestionsList.innerHTML = '';
            const tips = getProductSpecificTips(productType, score);
            tips.forEach(tip => {
                const li = document.createElement('li');
                li.textContent = tip;
                suggestionsList.appendChild(li);
            });
        }
    }

    // Analyze the current page
    async function analyzePage() {
        showLoadingState(true);
        
        try {
            // Get active tab
            const [tab] = await chrome.tabs.query({ active: true, currentWindow: true });
            
            // Check if we're on a valid page
            if (!tab.url || tab.url.startsWith('chrome://') || tab.url.startsWith('edge://')) {
                throw new Error('Cannot analyze this page. Please navigate to a product page.');
            }
            
            // Send message to content script
            let response;
            try {
                response = await chrome.tabs.sendMessage(tab.id, { action: 'analyzePage' });
                
                if (!response) {
                    // If no response, the content script might not be injected
                    await chrome.scripting.executeScript({
                        target: { tabId: tab.id },
                        files: ['js/content-clean.js']
                    });
                    
                    // Try again after injecting the script
                    response = await chrome.tabs.sendMessage(tab.id, { action: 'analyzePage' });
                }
                
                if (response && !response.error) {
                    updateSustainabilityDisplay(response);
                } else {
                    throw new Error(response?.error || 'Failed to analyze page');
                }
            } catch (contentError) {
                console.error('Content script error:', contentError);
                throw new Error('Could not analyze this page. Please try refreshing the page and try again.');
            }
        } catch (error) {
            console.error('Error in analyzePage:', error);
            
            // Show error to user
            if (ecoMessageElement) {
                ecoMessageElement.textContent = error.message || 'Error analyzing page';
                ecoMessageElement.style.color = '#ff4444';
            }
            
            // Show default suggestions
            if (suggestionsList) {
                suggestionsList.innerHTML = '';
                const tips = [
                    'Make sure you\'re on a product page',
                    'Try refreshing the page and try again',
                    'Check the browser console for more details'
                ];
                tips.forEach(tip => {
                    const li = document.createElement('li');
                    li.textContent = tip;
                    suggestionsList.appendChild(li);
                });
            }
        } finally {
            showLoadingState(false);
        }
    }

    // Event Listeners
    if (scanButton) {
        scanButton.addEventListener('click', analyzePage);
    }

    // Initialize
    init();
});
